#!/usr/bin/env python3
"""
Script de g√©n√©ration de cl√© secr√®te s√©curis√©e
G√©n√®re une cl√© secr√®te cryptographiquement s√©curis√©e pour la production
"""

import secrets
import string
import sys

def generate_secret_key(length: int = 64) -> str:
    """
    G√©n√®re une cl√© secr√®te cryptographiquement s√©curis√©e
    
    Args:
        length: Longueur de la cl√© (minimum 32, recommand√© 64)
    
    Returns:
        Cl√© secr√®te s√©curis√©e
    """
    if length < 32:
        length = 32
    
    # Caract√®res autoris√©s pour la cl√© secr√®te
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    
    # G√©n√©rer la cl√© de mani√®re cryptographiquement s√©curis√©e
    secret_key = ''.join(secrets.choice(alphabet) for _ in range(length))
    
    return secret_key

def main():
    """Fonction principale"""
    print("üîê G√âN√âRATEUR DE CL√â SECR√àTE S√âCURIS√âE")
    print("=" * 50)
    
    # G√©n√©rer une cl√© de 64 caract√®res
    secret_key = generate_secret_key(64)
    
    print(f"‚úÖ Cl√© secr√®te g√©n√©r√©e (64 caract√®res)")
    print(f"üìã Longueur: {len(secret_key)} caract√®res")
    print(f"üîí S√©curit√©: Cryptographiquement s√©curis√©e")
    print()
    print("üìù Ajoutez cette ligne √† votre fichier .env :")
    print("-" * 50)
    print(f"SECRET_KEY={secret_key}")
    print("-" * 50)
    print()
    print("‚ö†Ô∏è  IMPORTANT:")
    print("‚Ä¢ Ne jamais commiter cette cl√© dans le code")
    print("‚Ä¢ Gardez cette cl√© secr√®te et s√©curis√©e")
    print("‚Ä¢ Utilisez des cl√©s diff√©rentes pour dev/staging/prod")
    print("‚Ä¢ Changez r√©guli√®rement vos cl√©s en production")
    
    return secret_key

if __name__ == "__main__":
    main()
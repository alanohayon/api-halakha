import sys
import os
import asyncio

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from app.utils.image_utils import get_latest_image_with_clean_name
from app.services.supabase_service import SupabaseService
from app.core.database import get_supabase

async def main():
    print("=== Test d'upload d'image vers Supabase Storage ===")

    try:
        # 1. Test de r√©cup√©ration de la derni√®re image
        print("\nüìÅ Recherche de la derni√®re image dans Downloads...")
        latest_image, clean_filename = get_latest_image_with_clean_name()
        
        if not latest_image:
            print("‚ùå Aucune image trouv√©e dans le dossier Downloads")
            print("üí° Conseil : Ajoutez une image (PNG, JPG, etc.) dans votre dossier Downloads")
            return
        
        print(f"‚úÖ Image trouv√©e : {latest_image}")
        print(f"üìù Nom nettoy√© : {clean_filename}")
        
        # 2. Test d'upload vers Supabase
        print("\nüöÄ Upload vers Supabase Storage...")
        supabase_client = get_supabase()
        supabase_service = SupabaseService(supabase_client)
        
        image_url = await supabase_service.upload_img_to_supabase(latest_image, clean_filename)
        
        if image_url:
            print(f"‚úÖ Upload r√©ussi !")
            print(f"üåê URL publique : {image_url}")
            
            # 3. Test de format Notion (simulation)
            print("\nüìã Format pour propri√©t√© Notion 'image' :")
            notion_format = {
                "image": {
                    "files": [
                        {
                            "name": "Image",
                            "type": "external",
                            "external": {
                                "url": image_url
                            }
                        }
                    ]
                }
            }
            print(f"‚úÖ {notion_format}")
            
        else:
            print("‚ùå √âchec de l'upload vers Supabase")
            
    except Exception as e:
        print(f"‚ùå Erreur durant le test : {e}")
        import traceback
        traceback.print_exc()
        
        
def sanitize_json_text(text: str) -> str:
    """
    Nettoie un texte pour √©viter les erreurs de d√©codage JSON
    en supprimant/√©chappant les caract√®res de contr√¥le invalides
    
    Args:
        text: Le texte √† nettoyer
        
    Returns:
        str: Le texte nettoy√© et s√©curis√© pour JSON
    """
    if not text:
        return ""
    
    # Remplacer les caract√®res de contr√¥le probl√©matiques
    text = text.replace('\n', '\\n')  # Nouvelles lignes
    text = text.replace('\r', '\\r')  # Retours chariot
    text = text.replace('\t', '\\t')  # Tabulations
    text = text.replace('\b', '\\b')  # Backspace
    text = text.replace('\f', '\\f')  # Form feed
    
    # √âchapper les guillemets
    text = text.replace('"', '\\"')
    text = text.replace("'", "\\'")
    
    # Supprimer les autres caract√®res de contr√¥le ASCII (0-31 sauf ceux d√©j√† trait√©s)
    import re
    text = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', text)
    
    # Nettoyer les caract√®res Unicode probl√©matiques
    text = text.encode('utf-8', errors='ignore').decode('utf-8')
    
    return text

async def test_text_sanitization():
    """Test de la fonction de nettoyage de texte"""
    print("\nüßπ Test de nettoyage de texte pour JSON...")
    
    # Texte avec caract√®res probl√©matiques
    problematic_text = '''

Peut on utiliser un siphon √† chantilly shabbat ?

C'est discut√©:
‚Ä¢‚Å†  ‚Å†Certains permettent ( Orhot shabbat t1,15-28, Maasse ashabbat t1,13-6), d'autres interdisent ( Shmirat shabbat keilhata 11-14, Or hashabbat t16, p31-33).

‚Ä¢‚Å†  ‚Å†Meme selon les avis permissifs, il sera interdit d'√©crire avec sur un g√¢teau ou dessiner des formes.
Les traits simples ou formes al√©atoires sont cependant permis [ Piske tchouvot 321, note 330].   
   
    '''
    
    print("üìù Texte original :")
    print(repr(problematic_text))
    
    cleaned_text = sanitize_json_text(problematic_text)
    print("\n‚úÖ Texte nettoy√© :")
    print(repr(cleaned_text))
    
    # Test avec un JSON
    try:
        import json
        test_data = {
            "question": cleaned_text,
            "content": "Contenu de test"
        }
        json_string = json.dumps(test_data, ensure_ascii=False)
        print("\nüéØ Test JSON r√©ussi !")
        print(f"JSON g√©n√©r√© : {json_string}")
        
    except Exception as e:
        print(f"‚ùå Erreur JSON : {e}")

if __name__ == "__main__":
    asyncio.run(test_text_sanitization())
    

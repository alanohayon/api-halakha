#!/usr/bin/env python3
"""
Script de v√©rification de la s√©curit√© CORS
V√©rifie que la configuration CORS est s√©curis√©e pour la production
"""

import os
import sys
import json
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour importer les modules
sys.path.append(str(Path(__file__).parent.parent))

from app.core.config import get_settings

def check_cors_security():
    """V√©rifie la configuration CORS pour la s√©curit√©"""
    print("üîç V√©rification de la s√©curit√© CORS...")
    
    try:
        settings = get_settings()
        
        # V√©rifier les origines CORS
        cors_origins = settings.backend_cors_origins
        print(f"üìã Origines CORS configur√©es: {cors_origins}")
        
        # V√©rifications de s√©curit√©
        security_issues = []
        
        # 1. V√©rifier qu'on n'utilise pas "*"
        if "*" in cors_origins:
            security_issues.append("‚ùå CRITIQUE: '*' trouv√© dans les origines CORS")
        else:
            print("‚úÖ Aucune origine wildcard '*' d√©tect√©e")
        
        # 2. V√©rifier que les origines sont des URLs valides
        for origin in cors_origins:
            if not origin.startswith(("http://", "https://")):
                security_issues.append(f"‚ùå Origine invalide: {origin}")
            elif origin.startswith("http://") and "localhost" not in origin:
                security_issues.append(f"‚ö†Ô∏è  HTTP non s√©curis√© en production: {origin}")
        
        # 3. V√©rifier la configuration CORS compl√®te
        cors_config = settings.cors_config
        print(f"üìã Configuration CORS compl√®te: {json.dumps(cors_config, indent=2)}")
        
        # 4. V√©rifier les headers autoris√©s
        allowed_headers = cors_config.get("allow_headers", [])
        if "*" in allowed_headers:
            security_issues.append("‚ùå CRITIQUE: Headers wildcard '*' autoris√©s")
        else:
            print("‚úÖ Headers sp√©cifiques autoris√©s")
        
        # 5. V√©rifier les m√©thodes autoris√©es
        allowed_methods = cors_config.get("allow_methods", [])
        if "*" in allowed_methods:
            security_issues.append("‚ùå CRITIQUE: M√©thodes wildcard '*' autoris√©es")
        else:
            print("‚úÖ M√©thodes sp√©cifiques autoris√©es")
        
        # R√©sultat
        if security_issues:
            print("\nüö® PROBL√àMES DE S√âCURIT√â D√âTECT√âS:")
            for issue in security_issues:
                print(f"  {issue}")
            return False
        else:
            print("\n‚úÖ CONFIGURATION CORS S√âCURIS√âE")
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False

def check_environment_variables():
    """V√©rifie les variables d'environnement critiques"""
    print("\nüîç V√©rification des variables d'environnement...")
    
    critical_vars = [
        "SUPABASE_URL",
        "SUPABASE_ANON_KEY", 
        "SUPABASE_SERVICE_KEY",
        "DATABASE_URL"
    ]
    
    missing_vars = []
    for var in critical_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Variables manquantes: {', '.join(missing_vars)}")
        print("üí° Cr√©ez un fichier .env bas√© sur env.example")
        return False
    else:
        print("‚úÖ Variables d'environnement critiques pr√©sentes")
        return True

def main():
    """Fonction principale de v√©rification"""
    print("=" * 60)
    print("üîí V√âRIFICATION DE S√âCURIT√â CORS - HALAKHA API")
    print("=" * 60)
    
    cors_ok = check_cors_security()
    env_ok = check_environment_variables()
    
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DE LA V√âRIFICATION")
    print("=" * 60)
    print(f"CORS S√©curis√©: {'‚úÖ' if cors_ok else '‚ùå'}")
    print(f"Variables d'environnement: {'‚úÖ' if env_ok else '‚ùå'}")
    
    if cors_ok and env_ok:
        print("\nüéâ PR√äT POUR LA PRODUCTION!")
        print("‚úÖ Le premier point de la checklist de d√©ploiement est valid√©")
        return 0
    else:
        print("\n‚ö†Ô∏è  CORRECTIONS N√âCESSAIRES AVANT D√âPLOIEMENT")
        return 1

if __name__ == "__main__":
    sys.exit(main())